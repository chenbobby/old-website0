---
layout: post
title: Storage
date:   2019-07-13 01:17:37 -0700
categories: "cs-cooking"
---
When thinking about storage, the basic ideas to consider are how much you can store things and how quickly you can retrieve or stow things. In a sense, the movement and storage of bytes in a computer is analogous to the movement and storage of food ingredients in a restaurant kitchen.

In your restaurant kitchen, your walk-in freezer is has massive capacity. You can store a very high quantity of food for a relatively long time. In your computer, this would be your "hard drive", "solid-state drive", "persistent storage", whatever. In general, this is called disk.

Also in your restaurant kitchen is the countertop. This countertop has significantly less space to hold food than your walk-in freezer, but you can prepare your ingredients much more easily here. In your computer, this would be your memory.

Last but not least, your restaurant kitchen has the stove, which has the least space of all. However, the stove is where all the actually cooking is done. In your computer, this is the processor.

To cook food in your restaurant kitchen, you generally start by moving large amounts of ingredients in bulk from your walk-in freezer over onto your countertop. Then, you move a more precise quantity and selection of these ingredients to the stove to cook. Very frequently and very easily, you move ingredients back and forth between your stove and countertop. In a slightly slower process, you move food from the countertop back into the freezer to make space and fetch another large batch of fresh ingredients. Moving food between freezer and countertop is slower than moving food between countertop and stove, but you can move a larger quantity of food in a single trip. This seems like a natural way to prepare, cook, and store large amounts of food.

In your computer, the movement and storage of bytes is very similar. The disk is designed to move large chunks of data at a time to and from the memory. We would say that movement of data from disk to memory has high throughput but also high latency. High throughput means that the quantity of data in a single trip is very large. This is a good thing. High latency means that the speed of a single trip (from start to finish) is long, which is less than ideal. On the other hand, the memory and processor is designed to move smaller chunks of data at a time, but at a much faster rate. Compared to the disk, the memory and the processor have low latency but low throughput.

A misconception is that bytes are only modified within the processor, but in reality the disk and memory all have capabilities to modify bytes and bits from a 1 to a 0 or vice versa. After all, the data is not actually "moving" from one place in the disk into an empty vacuum of space in memory. The bits stay exactly where they are, but each form of storage has their own mechanism for toggling the representation of these bits as if data is copied from one place to another. It is in the design of this mechanism and the design of how these bits are arranged that dictate the throughput and latency the storage, be it the processor, the memory, or the disk. Usually, people don't think of the memory or disk as "slower bulkier processors", in the same way that people don't think of the processor as "fast and tiny data storage", but this model is not necessarily a wrong form of understanding how each part contributes to the processing of bytes in your computer. Consider that, in your restaurant kitchen, you can still manipulate and rearrange the food in your walk-in freezer, on your countertop, or on your stove. However, the design of the shelves in your freezer and the design of the frying pan on your stove dictate how much and how quickly you can prepare your food. For the disk, you get the benefit of high throughput at the cost of high latency. You can work with a lot of food in a single trip to the freezer, but the whole trip takes longer. For the processor, you get the benefit of low latency at the cost of low throughput. You can prepare and cook you food more quickly and efficiently on the stove, but in smaller quantities.

A concept closely related to throughput is bandwidth. The throughput, more precisely, is how much data is being modified in a single operation at one point in time. The bandwidth is the maximum amount of data that can possibly be modified in a single operation at any time. In other words, bandwidth is an upper limit on throughput, which can go up or down depending on what the task requires. In your restaurant kitchen, you can certainly decide to only move one onion from your walk-in freezer to your countertop in each trip. This is rather inefficient since each trip takes about the same amount of time (a consistently high latency), whether you're moving a whole box of onions or just a single one. However, you cannot move a whole box of onions from your countertop onto your stove. The stove simply does not support the bandwidth nor the capacity to hold an entire box-worth of onions. So, when transferring data between your disk and your memory, your latency is relatively fixed so you might as well max out your bandwidth.
